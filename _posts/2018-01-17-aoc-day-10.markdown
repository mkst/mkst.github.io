---
layout: post
title:  "Advent of Code 2017, Day 10"
date:   2018-01-20 08:00:00 +0000
last_updated: 2018-01-20
categories: aoc tutorial
onload: fetch('https://raw.githubusercontent.com/streetster/aoc/master/2017/10.q', 'solution')
---

# Day 10: Knot Hash

If you were hoping for some slightly more hardcore challenges from the AoC, then **Day 10** should be right up your street. There's hexadecimal, bitwise XOR, ASCII and all sorts of other fun things going on. As always, let's take a look at the [challenge text](http://adventofcode.com/2017/day/10) and see where to begin!

## Solving Part 1

>To achieve this, **begin with a list of numbers from 0 to 255**, a current **position which begins at 0** (the first element in the list), a **skip size (which starts at 0)**, and a **sequence of lengths (your puzzle input)**. Then, for each length:
 - **Reverse** the order of that length of elements in the list**, starting with the element at the current position.
 - **Move** the current position forward by that length plus the skip size**.
 - **Increase** the skip size by one.

>**The list is circular;** if the current position and the length try to reverse elements beyond the end of the list, the operation reverses using as many extra elements as it needs from the front of the list. If the current position moves past the end of the list, it wraps around to the front. **Lengths larger than the size of the list are invalid**.

This doesn't actually sound too bad. We can leverage some tricks we learnt on [Day 6]({{ site.baseurl }}{% post_url 2018-01-03-aoc-day-06 %}){: .internal-link } to handle a circular list. Before we try to tackle the list of `256` numbers, we can work through the example for today. Let's fire up a Q session and get started.

We need a few variables to keep track of the *position* and *skip size*, we can call these `p` and `s` respectively and initialise them both to zero

```q
q)p:s:0 / assign both p and s to zero as a one-liner
```

And let's call our list `0 1 2 3 4`, `l`

```q
q)til 5 / til gives us the range from 0 up to the input
0 1 2 3 4
q)l:til 5 / saves writing a few characters
```

Variable initialisation done, next stop: the tricky bit.

We need to index into our list `l` at position `p`, and extract the next `3` (first item in our input list `i`) items (wrapping around if need be), reverse them and put them back in place.

From [Day 6]({{ site.baseurl }}{% post_url 2018-01-03-aoc-day-06 %}){: .internal-link } we saw we could use `til` and `mod` in order to generate a range of indexes (indices) that wrapped around a circular list:

```q
(offset + til range) mod (count list)
```

Replacing the placeholders with our variables, and the first length, `3`, gives us

```q
q)(p + til 3) mod count l
0 1 2
```

And sure enough, these are the indices we want, using them to index back into `l` gives us `0 1 2` as expected

```q
q)l (p + til 3) mod count l
0 1 2
```

We need to reverse these values, and then put them back into our list `l`. For that we can use the [amend](http://code.kx.com/q/ref/lists/#amend) operator that we also used on [Day 6]({{ site.baseurl }}{% post_url 2018-01-03-aoc-day-06 %}){: .internal-link }.

For today's challenge we will be using it with `4` parameters:

```q
@[variable;indices;function;arguments]
```

The *variable* is our list, `l`, the indices are given by `(p + til 3) mod count l`, the function is assignment, `:`, and the arguments are the `reverse` of `l (p + til 3) mod count l`.

```q
q)@[l;(p + til 3) mod count l;:;reverse l (p + til 3) mod count l]
2 1 0 3 4
```

Note that this does not save the updated the value in `l` unless we use `` `l `` or assign the result back into `l` as follows:

```q
q)l:@[l;(p + til 3) mod count l;:;reverse l (p + til 3) mod count l]
q)l
2 1 0 3 4
q)@[`l;(p + til 3) mod count l;:;reverse l (p + til 3) mod count l] / backticks only works on globals
`l
q)l / we performed reverse twice on the same indices, thus we are back to the start!
0 1 2 3 4
q)l:@[l;(p + til 3) mod count l;:;reverse l (p + til 3) mod count l] / get back to 2 1 0 3 4
q)l
2 1 0 3 4
```

We should now increment the position, `p` *by that length* (`3`) *plus the skip size* (`s`), *wrapping around with* `mod`

```q
q)p+:(3 + s) mod count l
q)p / check the value of p
3
```

And now *increase the skip size by one*

```q
q)s+:1
```

Let's perform all the apply again with the next input length, `4`

```q
q)l:@[l;(p + til 4) mod count l;:;reverse l (p + til 4) mod count l]
q)l
4 3 0 1 2
```

...and then update `p` and `s`

```q
q)p+:(4 + s) mod count l
q)s+:1
```

Next input is `1` which has no impact on our list, but we still need to update `p` and `s`

```q
q)l:@[l;(p + til 1) mod count l;:;reverse l (p + til 1) mod count l]
q)l
4 3 0 1 2
q)p+:(1 + s) mod count l
q)s+:1
```

.. and now with the final input, `5` gives us the following list:

```q
q)l:@[l;(p + til 5) mod count l;:;reverse l (p + til 5) mod count l]
q)l
3 4 2 1 0
```

In order to multiply the first two numbers together we can use take, `#` and [prd](http://code.kx.com/q/ref/arith-float/#prd) which returns us the product of the inputs:

```q
q)2#l / take 2 from list l
3 4
q)prd 2#l / multiply together
12
```

Great. We have some code that works for the example, albeit with a lot of keyboard work. Let's put the 3 steps (updating list `l`, updating `p` and updating `s`) together into a function.

This is the first function we've created that will have **two** arguments. We will be passing in (1) the list to be modified, and (2) a number to modify the list.

Q etiquette dictates we should use `x` and `y` as parameters, but for starters we can use `list` for the list parameter, and `length` for the input length parameter:

```q
{[list;length]
  list:@[list;(p + til length) mod count list;:;reverse list (p + til length) mod count list];
  p+:(length + s) mod count list; / update position p
  s+:1; / add 1 to s
  list / return the list from the function (don't add a semicolon here!)
  }
```

We are performing `(p + til length) mod count list` twice. Instead we can perform it once, save the result to a variable and then use this the next time we need it. Let's assign the first occurrence to variable `i` for *indices*, and then use that as the 2nd parameter of the apply function:

```q
{[list;length]
  list:@[list;i;:;reverse list i:(p + til length) mod count list]; / right-to-left evaluation :)
  p+:(length + s) mod count list; / update position p
  s+:1; / add 1 to s
  list / return list
  }
```

If we want to adhere to etiquette then the function becomes, which we can call `knot`:

```q
knot:{[x;y] / we don't actually need the [x;y]
  x:@[x;i;:;reverse x i:(p + til y) mod count x]; / amend list
  p+:(y + s) mod count x; / update position p
  s+:1; / add 1 to s
  x / return list
  }
```

Let's reset p and s, and run through the example again, using `knot`

```q
q)p:s:0 / reset position and skip size
q)knot[til 5;3]
2 1 0 3 4
q)knot[2 1 0 3 4;4]
4 3 0 1 2
q)knot[4 3 0 1 2;1]
4 3 0 1 2
q)knot[4 3 0 1 2;5]
3 4 2 1 0
```

It would be great if we could feed the *result* of `knot` back into `knot` for each of the input lengths... and we can.

Q gives us the adverb [over](http://code.kx.com/q/ref/control/#over) to perform a function *over* a list.

Generally `over` will feed 2 items from a list into a function, and then take the result and continue feeding it and each additional item from the list into that function. This can be demonstrated by combining `over` with add, `+`, on the numbers `1` to `10`. Note that because `+` is a built-in that is normally used infix (e.g. `1 + 3`), we need to wrap it in brackets:

```q
q)1 + til 10 / numbers 1 through 10
q)(+) over 1 + til 10
55
```

The sister function to `over` is `scan`, which outputs each result along the way, and can be very useful in seeing what is going on:

```q
q)(+) scan 1 + til 10
1 3 6 10 15 21 28 36 45 55
```

Unfortunately for today's challenge, the syntax is not *that* easy to understand. The first argument we want to pass in is our example input, `0 1 2 3 4`, and the rest of the list is our lengths, `3 4 1 5`.

In order to treat `0 1 2 3 4` as a single item we need to use [enlist](http://code.kx.com/q/ref/lists/#enlist) which wraps a list around it. We can then join this list to the lengths `3 4 1 5` with a comma `,`

```q
q)(enlist 0 1 2 3 4) / note it will appear to be a regular list
0 1 2 3 4
q)type (enlist 0 1 2 3 4) / but it has a type of a mixed list
0h
q)(enlist 0 1 2 3 4),3 4 1 5 / concatenating to a simple list highlights the difference
0 1 2 3 4
3
4
1
5
```

We can now reset `p` and `s` again, and then run `knot` with `scan` on this input. We are using `scan` to see the result at each iteration:

```q
q)p:s:0 / reset
q)knot scan (enlist til 5),3 4 1 5
0 1 2 3 4
2 1 0 3 4
4 3 0 1 2
4 3 0 1 2
3 4 2 1 0
```

Looks good. Now replace the `scan` with and `over`

```q
q)p:s:0; / maybe we can put this in a function... to save keep resetting them!
q)knot over (enlist til 5),3 4 1 5
3 4 2 1 0
```

Almost there. We just need to take the `prd` of the first `2` items of this list:

```q
q)p:s:0
q)prd 2#knot over (enlist til 5),3 4 1 5
12
```

OK! We can handle the example as a one-liner. Let's take a look at the [puzzle input](http://adventofcode.com/2017/day/10/input) for today.

```q
q)read0 `:input/10.txt
"97,167,54,178,2,11,209,174,119,248,254,0,255,1,64,190"
```

Ah, a list of numbers separated by commas. We've not had this one yet, but it's almost the same as [Day 6]({{ site.baseurl }}{% post_url 2018-01-03-aoc-day-06 %}){: .internal-link }, just separated by `","` instead of `"\t"`.

```q
q)first read0 `:input/10.txt / take the first line
"97,167,54,178,2,11,209,174,119,248,254,0,255,1,64,190"
q)"," vs first read0 `:input/10.txt / split on ","
"97"
"167"
"54"
"178"
,"2"
"11"
"209"
"174"
"119"
"248"
"254"
,"0"
"255"
,"1"
"64"
"190"
q)"J"$"," vs first read0 `:input/10.txt / and use big-J casting to cast to longs
97 167 54 178 2 11 209 174 119 248 254 0 255 1 64 190
```

The other difference between solving the example and solving **Part 1** is that our list needs to contain `256` items (`0..255`) rather than just `5`. This is easy to generate with `til`

```q
q)til 256
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 8..
```

So, for the last time, let's reset `p` and `s`, `enlist` the range `0..255`, concatenate it with our puzzle input and feed into `knot`, take the first `2` elements and calculate the product:

```q
q)p:s:0;
q)prd 2# knot over (enlist til 256),"J"$"," vs first read0 `:input/10.txt
8536
```

Bingo. That's today's first star!

## Solving Part 2

> The logic you've constructed forms a **single round** of the Knot Hash algorithm; running **the full thing requires many of these rounds**. Some input and output processing is also required... instead of merely running one round like you did above, **run a total of 64 rounds, using the same length sequence in each round. The current **position and skip size should be preserved between rounds**.

The first thing to note is that we need to convert our puzzle input ASCII characters and then append `17 31 73 47 23`.

We then need to perform the `knot` function `64` times.

Once that's done we need to **xor** together each of the 16, 16-item blocks, before finally converting to [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal).

Thankfully we can re-use our `knot` function as-is, we just need to add bit more code around it to get our second star.

Let's crack on...

We know from [Day 1]({{ site.baseurl }}{% post_url 2017-12-26-aoc-day-01 %}){: .internal-link } that using the small-j casting on a string will return us the ASCII values:

```q
q)"j"$first read0 `:input/10.txt
57 55 44 49 54 55 44 53 52 44 49 55 56 44 50 44 49 49 44 50 48 57 44 49 55 52 44 49 49 57 44 50 52 56 44 50 53 52 44 48 44 50 53 53 44 49 44 54 52 44 49 57 48
```

We need to append `17 31 73 47 23` to this (scroll right to see that it's worked!)

```q
q)("j"$first read0 `:input/10.txt),17 31 73 47 23 / note brackets
57 55 44 49 54 55 44 53 52 44 49 55 56 44 50 44 49 49 44 50 48 57 44 49 55 52 44 49 49 57 44 50 52 56 44 50 53 52 44 48 44 50 53 53 44 49 44 54 52 44 49 57 48 17 31 73 47 23
```

If we want to perform our `knot` function `64` times with this input list we can just take 64 copies of this list, and feed them into `knot`.

In order to take (`#`) the whole list `64` times we need to `enlist` it. Here's a quick example showing the difference:

```q
q)10#1 2 3 / take 10 from the list '1 2 3'
1 2 3 1 2 3 1 2 3 1
q)10#enlist 1 2 3 / take 10 of the list '1 2 3'
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
```

We then need to flatten this down again, which we can do with `raze`:

```q
q)raze 10#enlist 1 2 3
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3
```

Let's do the same with our puzzle input:

```q
q)raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
57 55 44 49 54 55 44 53 52 44 49 55 56 44 50 44 49 49 44 50 48 57 44 49 55 52 44 49 49 57 44 50 52 56 44 50 53 52 44 48 44 50 53 53 44 49 44 54 52 44 49 57 48 17 31 73 47 23 57 55 44 49 54 55 44 53 52 44 49 55 56 44 50 44 49 49 44 50 48 ..
```

It's a long list...

```q
q)count raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
3712
```

If we reset `p` and `s` again, and feed this list into `knot` along with our enlisted `til 256` we will get this:

```q
q)p:s:0;
q)knot over (enlist til 256 ),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
128 8 0 225 59 13 127 253 100 224 188 218 153 239 58 220 159 163 111 2 23 237 54 182 228 56 50 61 75 99 34 7 76 168 53 192 216 57 176 204 105 21 52 132 198 244 62 223 19 90 67 136 174 33 246 72 141 139 249 133 179 121 35 89 155 4 241 3 1..
```

In order to cut this into chunks of 16, we can use [cut](http://code.kx.com/q/ref/lists/#cut). This operator takes 2 parameters, a list (or matrix) to operate on, and the size of the chunks to `cut` the input into.

```q
q)4 cut "Hello, World!"
"Hell"
"o, W"
"orld"
,"!"
```

Let's use this on the result of our `knot`

```q
q)p:s:0; / reset!
q)16 cut knot over (enlist til 256 ),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
128 8   0   225 59  13  127 253 100 224 188 218 153 239 58  220
159 163 111 2   23  237 54  182 228 56  50  61  75  99  34  7  
76  168 53  192 216 57  176 204 105 21  52  132 198 244 62  223
19  90  67  136 174 33  246 72  141 139 249 133 179 121 35  89
155 4   241 3   181 187 146 254 27  173 236 81  66  71  135 255
217 91  211 191 30  183 193 154 202 87  138 80  250 114 15  85
64  206 190 203 208 120 170 109 164 129 26  107 98  110 102 124
77  25  9   147 51  166 86  240 39  45  185 160 92  189 74  32
145 143 126 200 55  222 73  36  63  10  103 214 245 95  226 212
178 49  83  231 151 65  169 12  161 196 162 101 156 149 41  88
180 195 96  20  78  140 118 108 199 122 205 31  5   201 68  194
37  233 40  157 116 172 43  113 123 106 79  115 6   84  232 125
221 148 235 29  213 119 18  234 134 44  242 177 17  215 16  97
150 243 70  167 171 48  14  130 112 117 165 94  142 209 158 227
38  131 144 238 230 42  252 11  104 47  248 210 69  219 82  152
207 28  251 93  186 184 22  60  137 229 1   247 24  175 46  197
```

The next step is to **xor** each of these lines together to create a 'dense hash' from this 'sparse hash'. There is no bitwise xor built-in to Q. Instead we have to convert our inputs to boolean lists, perform xor on them, and then convert the result back.

In order to convert a number to it's bit representation we need to use [vs](http://code.kx.com/q/ref/casting/#vs) as an encoder.

```q
q)0b vs 123 / this is the syntax to convert to a list of bits
0000000000000000000000000000000000000000000000000000000001111011b
```

In order to convert a list of bits back to a number, we need to use [sv](http://code.kx.com/q/ref/casting/#sv) as a decoder

```q
q)0b sv 0000000000000000000000000000000000000000000000000000000001111011b / converting back
123
```

We an use the `<>` comparison as **xor**. The xor of `65` and `27` is shown below

```q
q)(0b vs 65)<>0b vs 27 / <> is not-equal, ie xor
0000000000000000000000000000000000000000000000000000000001011010b
q)0b sv (0b vs 65)<>0b vs 27
90
```

If we convert this to a lambda we get:

```q
{ 0b sv (0b vs x)<>(0b vs y) }
```

Which we can call to `xor` and try out:

```q
q)xor:{ 0b sv (0b vs x)<>(0b vs y) }
q)xor[65;27]
90
```

In order to apply this over a list, we can use the `over` adverb we used in **Part 1**.

The example states that the `xor` of `65 27 9 1 4 3 40 50 91 7 6 0 2 5 68 22` is `64`, let's make sure we agree:

```q
q)xor over 65 27 9 1 4 3 40 50 91 7 6 0 2 5 68 22
64
```

Nice. Let's apply `xor over` to `each` of our `16` lists

```q
q)p:s:0
q){ xor over x } each 16 cut knot over (enlist til 256),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
175 245 147 121 121 137 214 101 52 158 254 17 187 79 217 155
```

We can remove the lambda by wrapping the `xor over` in brackets:

```q
q)p:s:0
q)(xor over) each 16 cut knot over (enlist til 256),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
175 245 147 121 121 137 214 101 52 158 254 17 187 79 217 155
```

Now we need to convert this to hexadecimal. We can do this by [casting](http://code.kx.com/q/ref/casting/#tok) to bytes with `"x"$`:

```q
q)p:s:0
q)"x"$(xor over) each 16 cut knot over (enlist til 256),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
0xaff593797989d665349efe11bb4fd99b
```

For completeness we should convert this to a `string`:

```q
q)p:s:0 / reset...
q)string:"x"$(xor over) each 16 cut knot over (enlist til 256),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
"af"
"f5"
"93"
"79"
"79"
"89"
"d6"
"65"
"34"
"9e"
"fe"
"11"
"bb"
"4f"
"d9"
"9b"
```

... which we need to flatten with `raze`

```q
q)p:s:0
q)raze string res:"x"$(xor over) each 16 cut knot over (enlist til 256),raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23
"aff593797989d665349efe11bb4fd99b"
```

... and today's second star is ours!

## Complete Solution To Day 10

My full solution for **Day 10** is below.

In the `knot` function I am setting the indices variable `w` first, so that we do not need to assign `x` and return it at the end. I'm also not applying `mod` when updating `p` as the `mod` in `(p + til y) mod count x` will do this for us.

<pre class="q" id='solution'></pre>
