---
layout: post
title:  ":christmas_tree: Advent of Code 2017, Day 14"
date:   2020-05-21 08:00:00 +0000
last_updated: 2020-05-21
categories: aoc tutorial
onload: fetch('https://raw.githubusercontent.com/streetster/aoc/master/2017/14.q', 'solution')
---

# Day 14: Disk Defragmentation

Today's challenge builds off the work from [Day 10]({{ site.baseurl }}{% post_url 2018-01-17-aoc-day-10 %}){: .internal-link }, so if you haven't completed that yet - get cracking, and then come back once you are able to calculate a "knot hash".

Today's [challenge text](https://adventofcode.com/2017/day/14) packs quite a lot of detail, I've tried to extract the key sentences:

> The disk in question consists of a 128x128 grid; each square of the grid is either free or used. On this disk, **the state of the grid is tracked by the bits in a sequence of knot hashes**.
> A total of **128 knot hashes are calculated**, each corresponding to a single row in the grid; **each hash contains 128 bits which correspond to individual grid squares**. Each bit of a hash indicates whether that square is free (0) or used (1).
> The hash inputs are **a key** string (your puzzle input), **a dash**, and **a number from 0 to 127** corresponding to the row.

So, we need to calculate a **hash** and convert it to binary 128 times. Let's begin...

## Solving Part 1

A "knot hash" was the function we created to get the second star on [Day 10]({{ site.baseurl }}{% post_url 2018-01-17-aoc-day-10 %}){: .internal-link }:

```q
raze string "x"$(xor over) each 16 cut knot[til 256;raze 64#enlist ("j"$first read0 `:input/10.txt),17 31 73 47 23]
```

We need to generalise this so we can call it with any input ("sequence of lengths" in AoC speak). To do so we can replace the variable part of the function with a variable, lets call it `lengths`, and wrap it in a function:

```q
{[lengths] raze string "x"$(xor over) each 16 cut knot[til 256;raze 64#enlist ("j"$lengths),17 31 73 47 23] }
```

Note that we still wish to cast the input to ASCII (using `"j"$`) and append the magic numbers `17 31 73 47 23`. Let's call our function `hash`:

```q
hash:{[lengths] raze string "x"$(xor over) each 16 cut knot[til 256;raze 64#enlist ("j"$lengths),17 31 73 47 23] }
```

If we want to be more Q-like, we can rename the variable to `x`, and as the first argument of a function is implicitly `x`, we do not need to add it to the definition:

```q
hash:{raze string "x"$(xor over) each 16 cut knot[til 256;raze 64#enlist ("j"$x),17 31 73 47 23]}
```

Armed with our new `hash` function, lets take a look at the example. The input to the hash function is a key, a dash and a number. Their example key is `"flqrgnkx-0"`, the hash of this is shown below:

```q
q)hash "flqrgnkx-0"
"d4f76bdcbf838f8416ccfa8bc6d1f9e6"
```

We then need to consider this string as hexadecimal representation where "0" is 0 and "f" is 15... *however* in our hash function we have the result as a list of bytes which we are then converting to a string for pretty-printing. We can therefore simplify our hash function:

```q
q)hash:{"x"$(xor over) each 16 cut knot[til 256;raze 64#enlist ("j"$x),17 31 73 47 23]}
q)hash "flqrgnkx-0"
0xd4f76bdcbf838f8416ccfa8bc6d1f9e6
```

We then want to convert to binary. As we leant from [Day 10]({{ site.baseurl }}{% post_url 2018-01-17-aoc-day-10 %}){: .internal-link } we can use `0b vs`:

```q
q)0b vs 0xd4 / d => 1101, 4 => 0100
11010100b
```

We need to use either each-both, `'`, or each-right, `/:` to apply the conversion to element of our hash:

```q
q)0b vs'hash "flqrgnkx-0"
11010100b
11110111b
01101011b
11011100b
..
q)0b vs/:hash "flqrgnkx-0"
11010100b
11110111b
01101011b
11011100b
..
```

As this is performing the operation on each item in the list, we need to use `raze` to flatten the results:

```q
q)raze 0b vs'hash "flqrgnkx-0"
11010100111101110110101111011100101111111000001110001111100001000001011011001100111110101000101111000110110100011111100111100110b
```

Let's wrap this in a lambda for reasons that will become clear later:

```q
q){raze 0b vs'x} hash "flqrgnkx-0"
11010100111101110110101111011100101111111000001110001111100001000001011011001100111110101000101111000110110100011111100111100110b
```

We need to do this another 127 times, so let's construct a list of `"flqrgnkx-0", "flqrgnkx-1", ..., "flqrgnkx-127"`. In order to do this we can start by creating the list of 0..127 via `til`:

```q
q)til 128
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..
```

We need to join (`,`) the key, `"flqrgnkx-"` with each-right number, similar to what we did on [Day 8]({{ site.baseurl }}{% post_url 2018-01-13-aoc-day-08 %}){: .internal-link } with our registers.

```q
q)"flqrgnkx-",/:til 128
"f" "l" "q" "r" "g" "n" "k" "x" "-" 0
"f" "l" "q" "r" "g" "n" "k" "x" "-" 1
"f" "l" "q" "r" "g" "n" "k" "x" "-" 2
"f" "l" "q" "r" "g" "n" "k" "x" "-" 3
"f" "l" "q" "r" "g" "n" "k" "x" "-" 4
"f" "l" "q" "r" "g" "n" "k" "x" "-" 5
..
```

This isn't quite what we're after - the list of numbers if a different type than the key. We therefore need to cast the numeric list to a string, and try again:

```q
q)"flqrgnkx-",/:string til 128
"flqrgnkx-0"
"flqrgnkx-1"
"flqrgnkx-2"
"flqrgnkx-3"
"flqrgnkx-4"
"flqrgnkx-5"
..
```

If we apply our `hash` function to `each`:

```q
q)hash each "flqrgnkx-",/:string til 128
0xd4f76bdcbf838f8416ccfa8bc6d1f9e6
0x55eab3c4fbfede16dcec2c66dda26464
0x0adf13fa40e8ea815376776af3b7b231
0xad3da28cd7b8fb99742c0e63672caf62
0x682fe48c55876aaaa11df2634f96d31a
..
```

We can then convert `each` entry to binary with our lambda:

```q
q){raze 0b vs'x} each hash each "flqrgnkx-",/:string til 128
11010100111101110110101111011100101111111000001110001111100001000001011011001..
01010101111010101011001111000100111110111111111011011110000101101101110011101..
00001010110111110001001111111010010000001110100011101010100000010101001101110..
10101101001111011010001010001100110101111011100011111011100110010111010000101..
01101000001011111110010010001100010101011000011101101010101010101010000100011..
..
```

In order to count the number of 'on' bits, we can flatten the results with `raze` and user `sum` to confirm that our code gets the correct result for the example key, `8108`.

```q
q)sum raze {raze 0b vs'x} each hash each "flqrgnkx-",/:string til 128
8108i
```

Now we just need to replace the example key with our [puzzle input](https://adventofcode.com/2017/day/14/input), append the dash, and get today's first star. First lets read in the puzzle input and grab the first line:

```q
q)read0 `:input/14.txt             / looks like what we want
"hxtvlmkl"
q)count read0 `:input/14.txt       / but as we know, we've got a list of strings
1
q)first read0 `:input/14.txt       / so grab the first
"hxtvlmkl"
q)count first read0 `:input/14.txt / and sanity check
8
```

Appending a dash can be done a few different ways, pick your poison:

```q
q)(first read0 `:input/14.txt),"-"   / round brackets
"hxtvlmkl-"
q),[;"-"] first read0 `:input/14.txt / as a projection
"hxtvlmkl-"
q),[first read0 `:input/14.txt;"-"]  / square brackets
"hxtvlmkl-"
```

And then join this key with each-right numbers `0` through `127`:

```q
q)10#,[first read0 `:input/14.txt;"-"],/:string til 128 / no round brackets
"hxtvlmkl-0"
"hxtvlmkl-1"
"hxtvlmkl-2"
"hxtvlmkl-3"
"hxtvlmkl-4"
"hxtvlmkl-5"
..
q)(first[read0 `:input/14.txt],"-"),/:string til 128 / mixing things up a bit
"hxtvlmkl-0"
"hxtvlmkl-1"
"hxtvlmkl-2"
"hxtvlmkl-3"
"hxtvlmkl-4"
"hxtvlmkl-5"
..
```

... and combine with our earlier code to get the first star:

```q
q)sum raze {raze 0b vs'x} each hash each (first[read0 `:input/14.txt],","),/:string til 128
8240i
```

## Solving Part 2

> Now, all the defragmenter needs to know is the number of regions. **A region is a group of used squares that are all adjacent**, not including diagonals. Every used square is in exactly one region: lone used squares form their own isolated regions, while several **adjacent squares all count as a single region**.

**Part 2** ups the ante. We need to determine the region of each 'bit' in the set of 128 hashes. There are a few different ways to approach this. The way I solved it was to iterate over every bit in the grid, recursively visiting all adjacent bits - recording them as being part of the current region.

*Full breakdown coming soon...*

## Complete Solution To Day 14

My full solution for **Day 14** is below.

<pre class="q" id='solution'></pre>
